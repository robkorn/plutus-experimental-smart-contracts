
sort walletStates = struct walletStates(w1: Int, w2: Int, scW: Int);

act payToScriptAct : walletStates # walletStates;
	collectFromScriptAct : walletStates # walletStates;

% Payment Functions
map w1PayToScriptFn : Nat # walletStates -> walletStates;
var n : Nat, ws : walletStates;
eqn w1PayToScriptFn(n, ws) = walletStates(w1(ws)-n, w2(ws), scW(ws)+n);

map w2PayToScriptFn : Nat # walletStates -> walletStates;
var n : Nat, ws : walletStates;
eqn w2PayToScriptFn(n, ws) = walletStates(w1(ws), w2(ws)-n, scW(ws)+n);

% Collect Functions

map w1CollectFromScriptFn : walletStates -> walletStates;
var ws : walletStates;
eqn w1CollectFromScriptFn(ws) = walletStates(w1(ws) + scW(ws), w2(ws), 0);

map w2CollectFromScriptFn : walletStates -> walletStates;
var ws : walletStates;
eqn w2CollectFromScriptFn(ws) = walletStates(w1(ws), w2(ws)  + scW(ws), 0);


proc 
	w1PayToScript(n : Nat, ws : walletStates) = payToScriptAct(ws, w1PayToScriptFn(n, ws));
	w2PayToScript(n : Nat, ws : walletStates) = payToScriptAct(ws, w2PayToScriptFn(n, ws));

proc
	start(ws : walletStates) = w1PayToScript(1, ws) + w1PayToScript(1, ws)
							 . w2PayToScript(2, ws) + w2PayToScript(2, ws);

init
	start(walletStates(10, 10, 0));